<?php

namespace PhpCommonEnums\MimeType\Tests\Enumeration;

use PhpCommonEnums\MimeType\Enumeration\MimeTypeEnum;
use PHPUnit\Framework\TestCase;

class MimeTypeEnumTest extends TestCase
{
    public function testExpectedExt(): void
    {
        self::assertEquals(
            'epub',
            MimeTypeEnum::ApplicationEpubZip->getExt()
        );
        self::assertEquals(
            'gz',
            MimeTypeEnum::ApplicationGzip->getExt()
        );
        self::assertEquals(
            'jar',
            MimeTypeEnum::ApplicationJavaArchive->getExt()
        );
        self::assertEquals(
            'json',
            MimeTypeEnum::ApplicationJson->getExt()
        );
        self::assertEquals(
            'jsonld',
            MimeTypeEnum::ApplicationLdJson->getExt()
        );
        self::assertEquals(
            'doc',
            MimeTypeEnum::ApplicationMsword->getExt()
        );
        self::assertEquals(
            'bin',
            MimeTypeEnum::ApplicationOctetStream->getExt()
        );
        self::assertEquals(
            'ogx',
            MimeTypeEnum::ApplicationOgg->getExt()
        );
        self::assertEquals(
            'pdf',
            MimeTypeEnum::ApplicationPdf->getExt()
        );
        self::assertEquals(
            'rtf',
            MimeTypeEnum::ApplicationRtf->getExt()
        );
        self::assertEquals(
            'azw',
            MimeTypeEnum::ApplicationVndAmazonEbook->getExt()
        );
        self::assertEquals(
            'mpkg',
            MimeTypeEnum::ApplicationVndAppleInstallerXml->getExt()
        );
        self::assertEquals(
            'xul',
            MimeTypeEnum::ApplicationVndMozillaXulXml->getExt()
        );
        self::assertEquals(
            'xls',
            MimeTypeEnum::ApplicationVndMsExcel->getExt()
        );
        self::assertEquals(
            'eot',
            MimeTypeEnum::ApplicationVndMsFontobject->getExt()
        );
        self::assertEquals(
            'ppt',
            MimeTypeEnum::ApplicationVndMsPowerpoint->getExt()
        );
        self::assertEquals(
            'odp',
            MimeTypeEnum::ApplicationVndOasisOpendocumentPresentation->getExt()
        );
        self::assertEquals(
            'ods',
            MimeTypeEnum::ApplicationVndOasisOpendocumentSpreadsheet->getExt()
        );
        self::assertEquals(
            'odt',
            MimeTypeEnum::ApplicationVndOasisOpendocumentText->getExt()
        );
        self::assertEquals(
            'pptx',
            MimeTypeEnum::ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation->getExt()
        );
        self::assertEquals(
            'xlsx',
            MimeTypeEnum::ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet->getExt()
        );
        self::assertEquals(
            'docx',
            MimeTypeEnum::ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument->getExt()
        );
        self::assertEquals(
            'rar',
            MimeTypeEnum::ApplicationVndRar->getExt()
        );
        self::assertEquals(
            'vsd',
            MimeTypeEnum::ApplicationVndVisio->getExt()
        );
        self::assertEquals(
            '7z',
            MimeTypeEnum::ApplicationX7zCompressed->getExt()
        );
        self::assertEquals(
            'abw',
            MimeTypeEnum::ApplicationXAbiword->getExt()
        );
        self::assertEquals(
            'bz',
            MimeTypeEnum::ApplicationXBzip->getExt()
        );
        self::assertEquals(
            'bz2',
            MimeTypeEnum::ApplicationXBzip2->getExt()
        );
        self::assertEquals(
            'cda',
            MimeTypeEnum::ApplicationXCdf->getExt()
        );
        self::assertEquals(
            'csh',
            MimeTypeEnum::ApplicationXCsh->getExt()
        );
        self::assertEquals(
            'xhtml',
            MimeTypeEnum::ApplicationXhtmlXml->getExt()
        );
        self::assertEquals(
            'php',
            MimeTypeEnum::ApplicationXHttpdPhp->getExt()
        );
        self::assertEquals(
            'xml',
            MimeTypeEnum::ApplicationXml->getExt()
        );
        self::assertEquals(
            'sh',
            MimeTypeEnum::ApplicationXSh->getExt()
        );
        self::assertEquals(
            'svf',
            MimeTypeEnum::ApplicationXShockwaveFlash->getExt()
        );
        self::assertEquals(
            'tar',
            MimeTypeEnum::ApplicationXTar->getExt()
        );
        self::assertEquals(
            'zip',
            MimeTypeEnum::ApplicationZip->getExt()
        );
        self::assertEquals(
            '3gp',
            MimeTypeEnum::Audio3gpp->getExt()
        );
        self::assertEquals(
            '3g2',
            MimeTypeEnum::Audio3gpp2->getExt()
        );
        self::assertEquals(
            'aac',
            MimeTypeEnum::AudioAAC->getExt()
        );
        self::assertEquals(
            'midi',
            MimeTypeEnum::AudioMidi->getExt()
        );
        self::assertEquals(
            'mp3',
            MimeTypeEnum::AudioMpeg->getExt()
        );
        self::assertEquals(
            'oga',
            MimeTypeEnum::AudioOgg->getExt()
        );
        self::assertEquals(
            'opus',
            MimeTypeEnum::AudioOpus->getExt()
        );
        self::assertEquals(
            'wav',
            MimeTypeEnum::AudioWav->getExt()
        );
        self::assertEquals(
            'weba',
            MimeTypeEnum::AudioWebm->getExt()
        );
        self::assertEquals(
            'midi',
            MimeTypeEnum::AudioXMidi->getExt()
        );
        self::assertEquals(
            'otf',
            MimeTypeEnum::FontOtf->getExt()
        );
        self::assertEquals(
            'ttf',
            MimeTypeEnum::FontTtf->getExt()
        );
        self::assertEquals(
            'woff',
            MimeTypeEnum::FontWoff->getExt()
        );
        self::assertEquals(
            'woff2',
            MimeTypeEnum::FontWoff2->getExt()
        );
        self::assertEquals(
            'avif',
            MimeTypeEnum::ImageAvif->getExt()
        );
        self::assertEquals(
            'bmp',
            MimeTypeEnum::ImageBmp->getExt()
        );
        self::assertEquals(
            'gif',
            MimeTypeEnum::ImageGif->getExt()
        );
        self::assertEquals(
            'jpg',
            MimeTypeEnum::ImageJpeg->getExt()
        );
        self::assertEquals(
            'png',
            MimeTypeEnum::ImagePng->getExt()
        );
        self::assertEquals(
            'svg',
            MimeTypeEnum::ImageSvgXml->getExt()
        );
        self::assertEquals(
            'tiff',
            MimeTypeEnum::ImageTiff->getExt()
        );
        self::assertEquals(
            'ico',
            MimeTypeEnum::ImageVndMicrosoftIcon->getExt()
        );
        self::assertEquals(
            'webp',
            MimeTypeEnum::ImageWebp->getExt()
        );
        self::assertEquals(
            'ics',
            MimeTypeEnum::TextCalendar->getExt()
        );
        self::assertEquals(
            'css',
            MimeTypeEnum::TextCss->getExt()
        );
        self::assertEquals(
            'csv',
            MimeTypeEnum::TextCsv->getExt()
        );
        self::assertEquals(
            'html',
            MimeTypeEnum::TextHtml->getExt()
        );
        self::assertEquals(
            'js',
            MimeTypeEnum::TextJavascript->getExt()
        );
        self::assertEquals(
            'txt',
            MimeTypeEnum::TextPlain->getExt()
        );
        self::assertEquals(
            '3gp',
            MimeTypeEnum::Video3gpp->getExt()
        );
        self::assertEquals(
            '3g2',
            MimeTypeEnum::Video3gpp2->getExt()
        );
        self::assertEquals(
            'ts',
            MimeTypeEnum::VideoMp2t->getExt()
        );
        self::assertEquals(
            'mp4',
            MimeTypeEnum::VideoMp4->getExt()
        );
        self::assertEquals(
            'mpeg',
            MimeTypeEnum::VideoMpeg->getExt()
        );
        self::assertEquals(
            'ogv',
            MimeTypeEnum::VideoOgg->getExt()
        );
        self::assertEquals(
            'webm',
            MimeTypeEnum::VideoWebm->getExt()
        );
        self::assertEquals(
            'avi',
            MimeTypeEnum::VideoXMsvideo->getExt()
        );
    }

    public function testExpectedLabels(): void
    {
        self::assertEquals(
            'Electronic publication (EPUB)',
            MimeTypeEnum::ApplicationEpubZip->getLabel()
        );
        self::assertEquals(
            'GZip Compressed Archive',
            MimeTypeEnum::ApplicationGzip->getLabel()
        );
        self::assertEquals(
            'Java Archive (JAR)',
            MimeTypeEnum::ApplicationJavaArchive->getLabel()
        );
        self::assertEquals(
            'JSON format',
            MimeTypeEnum::ApplicationJson->getLabel()
        );
        self::assertEquals(
            'JSON-LD format',
            MimeTypeEnum::ApplicationLdJson->getLabel()
        );
        self::assertEquals(
            'Microsoft Word',
            MimeTypeEnum::ApplicationMsword->getLabel()
        );
        self::assertEquals(
            'Any kind of binary data',
            MimeTypeEnum::ApplicationOctetStream->getLabel()
        );
        self::assertEquals(
            'OGG',
            MimeTypeEnum::ApplicationOgg->getLabel()
        );
        self::assertEquals(
            'Adobe Portable Document Format (PDF)',
            MimeTypeEnum::ApplicationPdf->getLabel()
        );
        self::assertEquals(
            'Rich Text Format (RTF)',
            MimeTypeEnum::ApplicationRtf->getLabel()
        );
        self::assertEquals(
            'Amazon Kindle eBook format',
            MimeTypeEnum::ApplicationVndAmazonEbook->getLabel()
        );
        self::assertEquals(
            'Apple Installer Package',
            MimeTypeEnum::ApplicationVndAppleInstallerXml->getLabel()
        );
        self::assertEquals(
            'XUL',
            MimeTypeEnum::ApplicationVndMozillaXulXml->getLabel()
        );
        self::assertEquals(
            'Microsoft Excel',
            MimeTypeEnum::ApplicationVndMsExcel->getLabel()
        );
        self::assertEquals(
            'MS Embedded OpenType fonts',
            MimeTypeEnum::ApplicationVndMsFontobject->getLabel()
        );
        self::assertEquals(
            'Microsoft PowerPoint',
            MimeTypeEnum::ApplicationVndMsPowerpoint->getLabel()
        );
        self::assertEquals(
            'OpenDocument presentation document',
            MimeTypeEnum::ApplicationVndOasisOpendocumentPresentation->getLabel()
        );
        self::assertEquals(
            'OpenDocument spreadsheet document',
            MimeTypeEnum::ApplicationVndOasisOpendocumentSpreadsheet->getLabel()
        );
        self::assertEquals(
            'OpenDocument text document',
            MimeTypeEnum::ApplicationVndOasisOpendocumentText->getLabel()
        );
        self::assertEquals(
            'Microsoft PowerPoint (OpenXML)',
            MimeTypeEnum::ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation->getLabel()
        );
        self::assertEquals(
            'Microsoft Excel (OpenXML)',
            MimeTypeEnum::ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet->getLabel()
        );
        self::assertEquals(
            'Microsoft Word (OpenXML)',
            MimeTypeEnum::ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument->getLabel()
        );
        self::assertEquals(
            'RAR archive',
            MimeTypeEnum::ApplicationVndRar->getLabel()
        );
        self::assertEquals(
            'Microsoft Visio',
            MimeTypeEnum::ApplicationVndVisio->getLabel()
        );
        self::assertEquals(
            '7-zip archive',
            MimeTypeEnum::ApplicationX7zCompressed->getLabel()
        );
        self::assertEquals(
            'AbiWord document',
            MimeTypeEnum::ApplicationXAbiword->getLabel()
        );
        self::assertEquals(
            'BZip archive',
            MimeTypeEnum::ApplicationXBzip->getLabel()
        );
        self::assertEquals(
            'BZip2 archive',
            MimeTypeEnum::ApplicationXBzip2->getLabel()
        );
        self::assertEquals(
            'CD audio',
            MimeTypeEnum::ApplicationXCdf->getLabel()
        );
        self::assertEquals(
            'C-Shell script',
            MimeTypeEnum::ApplicationXCsh->getLabel()
        );
        self::assertEquals(
            'XHTML',
            MimeTypeEnum::ApplicationXhtmlXml->getLabel()
        );
        self::assertEquals(
            'PHP',
            MimeTypeEnum::ApplicationXHttpdPhp->getLabel()
        );
        self::assertEquals(
            'XML',
            MimeTypeEnum::ApplicationXml->getLabel()
        );
        self::assertEquals(
            'Bourne shell script',
            MimeTypeEnum::ApplicationXSh->getLabel()
        );
        self::assertEquals(
            'Adobe Flash document',
            MimeTypeEnum::ApplicationXShockwaveFlash->getLabel()
        );
        self::assertEquals(
            'Tape Archive (TAR)',
            MimeTypeEnum::ApplicationXTar->getLabel()
        );
        self::assertEquals(
            'ZIP archive',
            MimeTypeEnum::ApplicationZip->getLabel()
        );
        self::assertEquals(
            '3GPP audio container',
            MimeTypeEnum::Audio3gpp->getLabel()
        );
        self::assertEquals(
            '3GPP2 audio container',
            MimeTypeEnum::Audio3gpp2->getLabel()
        );
        self::assertEquals(
            'AAC audio',
            MimeTypeEnum::AudioAAC->getLabel()
        );
        self::assertEquals(
            'Musical Instrument Digital Interface (MIDI)',
            MimeTypeEnum::AudioMidi->getLabel()
        );
        self::assertEquals(
            'MP3 audio',
            MimeTypeEnum::AudioMpeg->getLabel()
        );
        self::assertEquals(
            'OGG audio',
            MimeTypeEnum::AudioOgg->getLabel()
        );
        self::assertEquals(
            'Opus audio',
            MimeTypeEnum::AudioOpus->getLabel()
        );
        self::assertEquals(
            'Waveform Audio Format',
            MimeTypeEnum::AudioWav->getLabel()
        );
        self::assertEquals(
            'WEBM audio',
            MimeTypeEnum::AudioWebm->getLabel()
        );
        self::assertEquals(
            'Musical Instrument Digital Interface (MIDI)',
            MimeTypeEnum::AudioXMidi->getLabel()
        );
        self::assertEquals(
            'OpenType font',
            MimeTypeEnum::FontOtf->getLabel()
        );
        self::assertEquals(
            'TrueType Font',
            MimeTypeEnum::FontTtf->getLabel()
        );
        self::assertEquals(
            'Web Open Font Format (WOFF)',
            MimeTypeEnum::FontWoff->getLabel()
        );
        self::assertEquals(
            'Web Open Font Format 2 (WOFF2)',
            MimeTypeEnum::FontWoff2->getLabel()
        );
        self::assertEquals(
            'AVIF image',
            MimeTypeEnum::ImageAvif->getLabel()
        );
        self::assertEquals(
            'Windows OS/2 Bitmap Graphics',
            MimeTypeEnum::ImageBmp->getLabel()
        );
        self::assertEquals(
            'Graphics Interchange Format (GIF)',
            MimeTypeEnum::ImageGif->getLabel()
        );
        self::assertEquals(
            'JPEG images',
            MimeTypeEnum::ImageJpeg->getLabel()
        );
        self::assertEquals(
            'Portable Network Graphics',
            MimeTypeEnum::ImagePng->getLabel()
        );
        self::assertEquals(
            'Scalable Vector Graphics (SVG)',
            MimeTypeEnum::ImageSvgXml->getLabel()
        );
        self::assertEquals(
            'Tagged Image File Format (TIFF)',
            MimeTypeEnum::ImageTiff->getLabel()
        );
        self::assertEquals(
            'Icon format',
            MimeTypeEnum::ImageVndMicrosoftIcon->getLabel()
        );
        self::assertEquals(
            'WEBP image',
            MimeTypeEnum::ImageWebp->getLabel()
        );
        self::assertEquals(
            'iCalendar format',
            MimeTypeEnum::TextCalendar->getLabel()
        );
        self::assertEquals(
            'Cascading Style Sheets (CSS)',
            MimeTypeEnum::TextCss->getLabel()
        );
        self::assertEquals(
            'Comma-separated values (CSV)',
            MimeTypeEnum::TextCsv->getLabel()
        );
        self::assertEquals(
            'HyperText Markup Language (HTML)',
            MimeTypeEnum::TextHtml->getLabel()
        );
        self::assertEquals(
            'JavaScript',
            MimeTypeEnum::TextJavascript->getLabel()
        );
        self::assertEquals(
            'Text (generally ASCII or ISO 8859-n)',
            MimeTypeEnum::TextPlain->getLabel()
        );
        self::assertEquals(
            '3GPP video container',
            MimeTypeEnum::Video3gpp->getLabel()
        );
        self::assertEquals(
            '3GPP2 video container',
            MimeTypeEnum::Video3gpp2->getLabel()
        );
        self::assertEquals(
            'MPEG transport stream',
            MimeTypeEnum::VideoMp2t->getLabel()
        );
        self::assertEquals(
            'MP4 video',
            MimeTypeEnum::VideoMp4->getLabel()
        );
        self::assertEquals(
            'MPEG Video',
            MimeTypeEnum::VideoMpeg->getLabel()
        );
        self::assertEquals(
            'OGG video',
            MimeTypeEnum::VideoOgg->getLabel()
        );
        self::assertEquals(
            'WEBM video',
            MimeTypeEnum::VideoWebm->getLabel()
        );
        self::assertEquals(
            'AVI: Audio Video Interleave',
            MimeTypeEnum::VideoXMsvideo->getLabel()
        );
    }

    public function testExpectedValues(): void
    {
        self::assertEquals(
            'application/epub+zip',
            MimeTypeEnum::ApplicationEpubZip->value
        );
        self::assertEquals(
            'application/gzip',
            MimeTypeEnum::ApplicationGzip->value
        );
        self::assertEquals(
            'application/java-archive',
            MimeTypeEnum::ApplicationJavaArchive->value
        );
        self::assertEquals(
            'application/json',
            MimeTypeEnum::ApplicationJson->value
        );
        self::assertEquals(
            'application/ld+json',
            MimeTypeEnum::ApplicationLdJson->value
        );
        self::assertEquals(
            'application/msword',
            MimeTypeEnum::ApplicationMsword->value
        );
        self::assertEquals(
            'application/octet-stream',
            MimeTypeEnum::ApplicationOctetStream->value
        );
        self::assertEquals(
            'application/ogg',
            MimeTypeEnum::ApplicationOgg->value
        );
        self::assertEquals(
            'application/pdf',
            MimeTypeEnum::ApplicationPdf->value
        );
        self::assertEquals(
            'application/rtf',
            MimeTypeEnum::ApplicationRtf->value
        );
        self::assertEquals(
            'application/vnd.amazon.ebook',
            MimeTypeEnum::ApplicationVndAmazonEbook->value
        );
        self::assertEquals(
            'application/vnd.apple.installer+xml',
            MimeTypeEnum::ApplicationVndAppleInstallerXml->value
        );
        self::assertEquals(
            'application/vnd.mozilla.xul+xml',
            MimeTypeEnum::ApplicationVndMozillaXulXml->value
        );
        self::assertEquals(
            'application/vnd.ms-excel',
            MimeTypeEnum::ApplicationVndMsExcel->value
        );
        self::assertEquals(
            'application/vnd.ms-fontobject',
            MimeTypeEnum::ApplicationVndMsFontobject->value
        );
        self::assertEquals(
            'application/vnd.ms-powerpoint',
            MimeTypeEnum::ApplicationVndMsPowerpoint->value
        );
        self::assertEquals(
            'application/vnd.oasis.opendocument.presentation',
            MimeTypeEnum::ApplicationVndOasisOpendocumentPresentation->value
        );
        self::assertEquals(
            'application/vnd.oasis.opendocument.spreadsheet',
            MimeTypeEnum::ApplicationVndOasisOpendocumentSpreadsheet->value
        );
        self::assertEquals(
            'application/vnd.oasis.opendocument.text',
            MimeTypeEnum::ApplicationVndOasisOpendocumentText->value
        );
        self::assertEquals(
            'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            MimeTypeEnum::ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation->value
        );
        self::assertEquals(
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            MimeTypeEnum::ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet->value
        );
        self::assertEquals(
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            MimeTypeEnum::ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument->value
        );
        self::assertEquals(
            'application/vnd.rar',
            MimeTypeEnum::ApplicationVndRar->value
        );
        self::assertEquals(
            'application/vnd.visio',
            MimeTypeEnum::ApplicationVndVisio->value
        );
        self::assertEquals(
            'application/x-7z-compressed',
            MimeTypeEnum::ApplicationX7zCompressed->value
        );
        self::assertEquals(
            'application/x-abiword',
            MimeTypeEnum::ApplicationXAbiword->value
        );
        self::assertEquals(
            'application/x-bzip',
            MimeTypeEnum::ApplicationXBzip->value
        );
        self::assertEquals(
            'application/x-bzip2',
            MimeTypeEnum::ApplicationXBzip2->value
        );
        self::assertEquals(
            'application/x-cdf',
            MimeTypeEnum::ApplicationXCdf->value
        );
        self::assertEquals(
            'application/x-csh',
            MimeTypeEnum::ApplicationXCsh->value
        );
        self::assertEquals(
            'application/xhtml+xml',
            MimeTypeEnum::ApplicationXhtmlXml->value
        );
        self::assertEquals(
            'application/x-httpd-php',
            MimeTypeEnum::ApplicationXHttpdPhp->value
        );
        self::assertEquals(
            'application/xml',
            MimeTypeEnum::ApplicationXml->value
        );
        self::assertEquals(
            'application/x-sh',
            MimeTypeEnum::ApplicationXSh->value
        );
        self::assertEquals(
            'application/x-shockwave-flash',
            MimeTypeEnum::ApplicationXShockwaveFlash->value
        );
        self::assertEquals(
            'application/x-tar',
            MimeTypeEnum::ApplicationXTar->value
        );
        self::assertEquals(
            'application/zip',
            MimeTypeEnum::ApplicationZip->value
        );
        self::assertEquals(
            'audio/3gpp',
            MimeTypeEnum::Audio3gpp->value
        );
        self::assertEquals(
            'audio/3gpp2',
            MimeTypeEnum::Audio3gpp2->value
        );
        self::assertEquals(
            'audio/aac',
            MimeTypeEnum::AudioAAC->value
        );
        self::assertEquals(
            'audio/midi',
            MimeTypeEnum::AudioMidi->value
        );
        self::assertEquals(
            'audio/mpeg',
            MimeTypeEnum::AudioMpeg->value
        );
        self::assertEquals(
            'audio/ogg',
            MimeTypeEnum::AudioOgg->value
        );
        self::assertEquals(
            'audio/opus',
            MimeTypeEnum::AudioOpus->value
        );
        self::assertEquals(
            'audio/wav',
            MimeTypeEnum::AudioWav->value
        );
        self::assertEquals(
            'audio/webm',
            MimeTypeEnum::AudioWebm->value
        );
        self::assertEquals(
            'audio/x-midi',
            MimeTypeEnum::AudioXMidi->value
        );
        self::assertEquals(
            'font/otf',
            MimeTypeEnum::FontOtf->value
        );
        self::assertEquals(
            'font/ttf',
            MimeTypeEnum::FontTtf->value
        );
        self::assertEquals(
            'font/woff',
            MimeTypeEnum::FontWoff->value
        );
        self::assertEquals(
            'font/woff2',
            MimeTypeEnum::FontWoff2->value
        );
        self::assertEquals(
            'image/avif',
            MimeTypeEnum::ImageAvif->value
        );
        self::assertEquals(
            'image/bmp',
            MimeTypeEnum::ImageBmp->value
        );
        self::assertEquals(
            'image/gif',
            MimeTypeEnum::ImageGif->value
        );
        self::assertEquals(
            'image/jpeg',
            MimeTypeEnum::ImageJpeg->value
        );
        self::assertEquals(
            'image/png',
            MimeTypeEnum::ImagePng->value
        );
        self::assertEquals(
            'image/svg+xml',
            MimeTypeEnum::ImageSvgXml->value
        );
        self::assertEquals(
            'image/tiff',
            MimeTypeEnum::ImageTiff->value
        );
        self::assertEquals(
            'image/vnd.microsoft.icon',
            MimeTypeEnum::ImageVndMicrosoftIcon->value
        );
        self::assertEquals(
            'image/webp',
            MimeTypeEnum::ImageWebp->value
        );
        self::assertEquals(
            'text/calendar',
            MimeTypeEnum::TextCalendar->value
        );
        self::assertEquals(
            'text/css',
            MimeTypeEnum::TextCss->value
        );
        self::assertEquals(
            'text/csv',
            MimeTypeEnum::TextCsv->value
        );
        self::assertEquals(
            'text/html',
            MimeTypeEnum::TextHtml->value
        );
        self::assertEquals(
            'text/javascript',
            MimeTypeEnum::TextJavascript->value
        );
        self::assertEquals(
            'text/plain',
            MimeTypeEnum::TextPlain->value
        );
        self::assertEquals(
            'video/3gpp',
            MimeTypeEnum::Video3gpp->value
        );
        self::assertEquals(
            'video/3gpp2',
            MimeTypeEnum::Video3gpp2->value
        );
        self::assertEquals(
            'video/mp2t',
            MimeTypeEnum::VideoMp2t->value
        );
        self::assertEquals(
            'video/mp4',
            MimeTypeEnum::VideoMp4->value
        );
        self::assertEquals(
            'video/mpeg',
            MimeTypeEnum::VideoMpeg->value
        );
        self::assertEquals(
            'video/ogg',
            MimeTypeEnum::VideoOgg->value
        );
        self::assertEquals(
            'video/webm',
            MimeTypeEnum::VideoWebm->value
        );
        self::assertEquals(
            'video/x-msvideo',
            MimeTypeEnum::VideoXMsvideo->value
        );
    }
}
